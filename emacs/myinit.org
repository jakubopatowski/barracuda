

  Author: Jakub Opatowski
  mailto: [[jakub.opatowski@gmail.com]]

* Readme

  [[https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool][How to add and configure new package]]
  [[https://github.com/jwiegley/use-package][use-package homepage]]

tltr

example:
(use-package smex
  :ensure t
  :bind (("M-x" . smex))
  :config (smex-initialize))

The :config keyword executes the code after a package is loaded; 
the :init keyword executes the code before the package is loaded; 
and the :preface keyword is there so the Emacs byte compiler and the 
lisp evaluator know about things like function and symbol declarations.

* Small tweaks

#+BEGIN_SRC emacs-lisp
  (setq ingibit-startup-message t)
  (tool-bar-mode -1)
  (show-paren-mode 1)
  ;;(electric-pair-mode 1)
  (defalias 'list-buffers 'ibuffer-other-window)
  (setq make-backup-files nil) ;stop creating backup~ files
  (setq auto-save-default nil) ;stop creating #autosave# files
  (setq column-number-mode t)
  (global-set-key "\C-c\C-d" "\C-a\C- \C-n\M-w\C-y")
  ;;(setq explicit-shell-file-name "c:/Windows/System32/cmd.exe /k \"\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\"\" x86_amd64") 
;;C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -NoExit -Command "& { Import-Module .\Common7\Tools\vsdevshell\Microsoft.VisualStudio.DevShell.dll; Enter-VsDevShell -InstanceId d459dda0}"
;;%comspec% /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Auxiliary\Build\vcvars64.bat"
#+END_SRC

* Small packages

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure )

  (use-package ace-window
    :ensure t
    :config
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
      '(aw-leading-char-face
        ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

  (use-package move-text
    :ensure t
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down)))
#+END_SRC

* Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-theme homepage]]
[[https://github.com/seagle0128/doom-modeline][doom-modeline homepage]]

#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :init
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-solarized-light t)
      (doom-themes-visual-bell-config)
      (doom-themes-neotree-config)
      ;;(doom-themes-treemacs-config)
      (doom-themes-org-config))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-major-mode-color-icon t)
      (setq doom-modeline-buffer-state-icon t)
      (setq doom-modeline-buffer-modification-icon t)
      (setq doom-modeline-minor-modes t))


#+END_SRC

* Neotree

[[https://github.com/domtronn/all-the-icons.el][all-the-icons homepage]]
[[https://github.com/jaypei/emacs-neotree][neotree homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package neotree
    :ensure t
    :init
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC

* Org mode setup

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Smartparens

[[https://github.com/Fuco1/smartparens][Smartparens homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens 
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    :bind
    (
     ("C-<down>" . sp-down-sexp)
     ("C-<up>" . sp-up-sexp)
     ("M-<down>" . sp-backward-down-sexp)
     ("M-<up>" . sp-backward-up-sexp)
     ("C-M-a" . sp-beginning-of-sexp)
     ("C-M-e" . sp-end-of-sexp)
   
     ("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)
     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)
   
     ("C-M-k" . sp-kill-sexp)
     ("C-k" . sp-kill-hybrid-sexp)
     ("M-k" . sp-backward-kill-sexp)
     ("C-M-w" . sp-copy-sexp)
   
     ("C-M-d" . delete-sexp)
     ("M-[" . sp-backward-unwrap-sexp)
     ("M-]" . sp-unwrap-sexp)
   
     ("C-x C-t" . sp-transpose-hybrid-sexp)
   
     ("C-c ("  . wrap-with-parens)
     ("C-c ["  . wrap-with-brackets)
     ("C-c {"  . wrap-with-braces)
     ("C-c '"  . wrap-with-single-quotes)
     ("C-c \"" . wrap-with-double-quotes)
     ("C-c _"  . wrap-with-underscores)
     ("C-c `"  . wrap-with-back-quotes)
     )
    )
#+END_SRC

* Better search

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffer t)
  (setq ivy-display-style 'fancy))

;;http://oremacs.com/swiper/
(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ;;("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffer t)
    (setq ivy-display-style 'fancy)
    ;;(define-key read-expression-map (kbd C-r) 'counsel-expression-history)
    ))

;;https://github.com/abo-abo/avy
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

#+END_SRC

* C++ development

Based on [[https://microsoft.github.io/language-server-protocol/][language server protocol]].
[[https://www.flycheck.org/en/latest/][flycheck homepage]]
[[https://microsoft.github.io/language-server-protocol/specification][Language Server Protocol Specification]]
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode homepage]]
[[https://github.com/emacs-lsp/lsp-ui][lsp-ui homepage]]
[[https://github.com/cquery-project/emacs-cquery][emacs-cquery homepage]]
[[https://sarcasm.github.io/notes/dev/compilation-database.html][compilation database manual]]

#+BEGIN_SRC emacs-lisp
    ;;use only spaces in indentation
    (progn
      (setq-default indent-tabs-mode nil))

    (setq c-default-style "k&r"
          c-basic-offset 4)

    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-ide-delay 0)
      (setq company-minimum-prefix-length 1)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))

    (use-package lsp-mode
      :ensure t
      :commands lsp)

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)

    (use-package company-lsp
      :ensure t
      :commands company-lsp)

    (use-package ccls
      :ensure t
      :hook
      ((c-mode c++-mode objc-mode) .
       (lambda () (require 'ccls) (lsp)))
      :config
      (setq ccls-executable "/home/jopa/Projekty/ccls/Release/ccls"))
#+END_SRC 

* Python development

[[https://github.com/jorgenschaefer/elpy][elpy homepage]]

#+BEGIN_SRC emacs-lisp  
    (use-package elpy
      :ensure t
      :config
      (elpy-enable)
      (setq python-shell-interpreter "jupyter"
            python-shell-interpreter-args "console --simple-prompt"
            python-shell-prompt-detect-failure-warning nil)
      (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter"))

    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets
      :ensure t)

    (use-package yasnippet
      :ensure t
      :config
      (yas-reload-all)
      (add-hook 'c-mode-hook 'yas-minor-mode)
      (add-hook 'c++-mode-hook 'yas-minor-mode)
      (add-hook 'objc-mode-hook 'yas-minor-mode)
      (add-hook 'java-mode-hook 'yas-minor-mode)
      (add-hook 'python-mode-hook 'yas-minor-mode)
      (add-hook 'org-mode-hook 'yas-minor-mode))
#+END_SRC


#+RESULTS:


